/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. caesar.jj */
/*@egen*//* caesar.jj - Caesar programming language grammar */

options {
  OUTPUT_DIRECTORY = "javasrc" ;
             
  KEEP_LINE_COLUMN = false;  
                 
}

PARSER_BEGIN(Caesar)

package caesar;

public class Caesar/*@bgen(jjtree)*/implements CaesarTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCaesarState jjtree = new JJTCaesarState();

/*@egen*/
    private static Logger logger = Logger.getLogger(CaesarInterpreter.class.getName());
    public static void main( String[] args ) {
      Caesar parser = new Caesar( System.in );
      try {
	ASTStart t = parser.Start(); 
	//t.dump("");
	CaesarVisitor v = new DumpCaesarVisitor();
	CaesarVisitor interpreter = new CaesarInterpreter();
	t.jjtAccept(v, null);
	t.jjtAccept(interpreter, null);
      } catch (Exception e) {
	System.out.println(e.getMessage());
	e.printStackTrace();
      }
    }
  }

PARSER_END(Caesar)



/* token syntax: TOKEN : { < NAME : regexp > } */
TOKEN : { < PROGRAM : "program" > }
TOKEN : { < ENDPROGRAM : "endprogram" > }
TOKEN : { < VAR : "var" > }
TOKEN : { < ARRAY : "array" > }	
TOKEN : { < IF : "if" > }
TOKEN : { < ELSE : "else" > }
TOKEN : { < ENDIF : "endif" > }
TOKEN : { < WHILE : "while" > }
TOKEN : { < ENDWHILE : "endwhile" > }
TOKEN : { < FOR : "for" > }
TOKEN : { < IN : "in" > }
TOKEN : { < TO : ".." > }
TOKEN : { < ENDFOR : "endfor" > }
TOKEN : { < PRINTLN : "println" > }
TOKEN : { < COLON : ":" > }
TOKEN : { < COMMA : "," > }

TOKEN : { < IDENT : <LETTER> ( <LETTER> | <DIGIT> )* > }

TOKEN : { < ASSIGN : "=" > }
TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS : "-" > }
TOKEN : { < MULTIPLY : "*" > }
TOKEN : { < DIVIDE : "/" > }

TOKEN : { < LBRC : "(" > }
TOKEN : { < RBRC : ")" > }
TOKEN : { < LABRC : "[" > }
TOKEN : { < RABRC : "]" > }
TOKEN : { < EQ : "==" > }
TOKEN : { < NE : "!=" > }
TOKEN : { < LT : "<" > }
TOKEN : { < GT : ">" > }
TOKEN : { < LE : "<=" > }
TOKEN : { < GE : ">=" > }
TOKEN : { < DOT : "." > }

TOKEN : { < REAL_CONST : (<DIGIT>)+ <DOT> (<DIGIT>)* > }

TOKEN : { < INT_CONST : (<DIGIT>)+ > }

TOKEN : { < DIGIT : ["0"-"9"] > }
TOKEN : { < LETTER : ["a"-"z"] | ["A"-"Z"] >}

SKIP : {" "}
SKIP : { "\n" | "\r" | "\r\n" }

ASTStart Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  <PROGRAM> Identifier() <COLON> CommandList() <ENDPROGRAM> <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CommandList() : {/*@bgen(jjtree) CommandList */
  ASTCommandList jjtn000 = new ASTCommandList(JJTCOMMANDLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CommandList */
  try {
/*@egen*/
  (Command() CommandList())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Command() : {/*@bgen(jjtree) Command */
  ASTCommand jjtn000 = new ASTCommand(JJTCOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Command */
  try {
/*@egen*/
  CreateVariableCmd()
  | AssignVariableCmd()
  | IfCmd()
  | WhileCmd()
  | PrintlnCmd()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  // TODO: other commands
}

void CreateVariableCmd() : {/*@bgen(jjtree) CreateVariableCmd */
  ASTCreateVariableCmd jjtn000 = new ASTCreateVariableCmd(JJTCREATEVARIABLECMD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) CreateVariableCmd */
  try {
/*@egen*/
  <VAR> Identifier() <ASSIGN> Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AssignVariableCmd() : {/*@bgen(jjtree) AssignVariableCmd */
  ASTAssignVariableCmd jjtn000 = new ASTAssignVariableCmd(JJTASSIGNVARIABLECMD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) AssignVariableCmd */
  try {
/*@egen*/
  <IDENT> <ASSIGN> Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IfCmd() : {/*@bgen(jjtree) IfCmd */
  ASTIfCmd jjtn000 = new ASTIfCmd(JJTIFCMD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfCmd */
  try {
/*@egen*/
  <IF> Condition() <COLON> CommandList() ElsePart()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ElsePart() : {/*@bgen(jjtree) ElsePart */
  ASTElsePart jjtn000 = new ASTElsePart(JJTELSEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElsePart */
  try {
/*@egen*/
  <ELSE> CommandList() <ENDIF>
  | <ENDIF>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Condition() : {/*@bgen(jjtree) Condition */
  ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Condition */
  try {
/*@egen*/
  Expression() RelationalOperator() Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RelationalOperator() : {/*@bgen(jjtree) RelationalOperator */
  ASTRelationalOperator jjtn000 = new ASTRelationalOperator(JJTRELATIONALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RelationalOperator */
  try {
/*@egen*/
  <EQ>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/   {jjtn000.setOperator(Operator.EQ);} 
  | <NE>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {jjtn000.setOperator(Operator.NE);}
  | <LT>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {jjtn000.setOperator(Operator.LT);}
  | <GT>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {jjtn000.setOperator(Operator.GT);}
  | <LE>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {jjtn000.setOperator(Operator.LE);}
  | <GE>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {jjtn000.setOperator(Operator.GE);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WhileCmd() : {/*@bgen(jjtree) WhileCmd */
  ASTWhileCmd jjtn000 = new ASTWhileCmd(JJTWHILECMD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileCmd */
  try {
/*@egen*/
  <WHILE> Condition() <COLON> CommandList() <ENDWHILE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PrintlnCmd() : {/*@bgen(jjtree) PrintlnCmd */
  ASTPrintlnCmd jjtn000 = new ASTPrintlnCmd(JJTPRINTLNCMD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}  
{/*@bgen(jjtree) PrintlnCmd */
  try {
/*@egen*/
  <PRINTLN> <LBRC> Expression() <RBRC>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expression() : {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Operator op;
}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  Term() 
  op = ExpressionX()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.setOperator(op);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Operator ExpressionX() : {/*@bgen(jjtree) ExpressionX */
  ASTExpressionX jjtn000 = new ASTExpressionX(JJTEXPRESSIONX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ExpressionX */
  try {
/*@egen*/
  (
    <PLUS> Term() ExpressionX()
    {return Operator.PLUS;}
    |
    <MINUS> Term() ExpressionX()
    {return Operator.MINUS;}
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return Operator.NULL;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Term() : {/*@bgen(jjtree) Term */
  ASTTerm jjtn000 = new ASTTerm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Operator op;
}
{/*@bgen(jjtree) Term */
  try {
/*@egen*/
  Factor() 
  op = TermX()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.setOperator(op);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Operator TermX() : {/*@bgen(jjtree) TermX */
  ASTTermX jjtn000 = new ASTTermX(JJTTERMX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TermX */
  try {
/*@egen*/
  (<MULTIPLY> Factor() TermX()
  {return Operator.MULTIPLY;}
   |
   <DIVIDE> Factor() TermX()
   {return Operator.DIVIDE;}
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return Operator.NULL;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Factor() : {/*@bgen(jjtree) Factor */
  ASTFactor jjtn000 = new ASTFactor(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Factor */
  try {
/*@egen*/
  <LBRC> Expression() <RBRC>
  | Identifier() FactorRest()
  | IntConst()
  | RealConst()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FactorRest() : {/*@bgen(jjtree) FactorRest */
  ASTFactorRest jjtn000 = new ASTFactorRest(JJTFACTORREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FactorRest */
    try {
/*@egen*/
    (<LABRC> Expression() <RABRC>)?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Identifier() : {/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  t = <IDENT>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IntConst() : {/*@bgen(jjtree) IntConst */
  ASTIntConst jjtn000 = new ASTIntConst(JJTINTCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
} 
{/*@bgen(jjtree) IntConst */
  try {
/*@egen*/
  t = <INT_CONST>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.setValue(Integer.parseInt(t.image));}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RealConst() : {/*@bgen(jjtree) RealConst */
  ASTRealConst jjtn000 = new ASTRealConst(JJTREALCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) RealConst */
  try {
/*@egen*/
  t = <REAL_CONST>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.setValue(Double.parseDouble(t.image));}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
// examples... DELETE THIS
/*
TOKEN : { < PLUS : "+" > }
TOKEN : { < NUMBER : (["0"-"9"])+ > }

void Start() :
{}
{
<NUMBER>
(
  <PLUS>
  <NUMBER>
)*
<EOF>
}
*/