/* Generated By:JavaCC: Do not edit this line. Caesar.java */
package caesar;

import caesar.interpreter.CaesarInterpreter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import caesar.ast.*;
import java.util.List;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Map;
import java.util.TreeMap;

public class Caesar implements CaesarConstants {

    private static final Logger logger = Logger.getLogger(Caesar.class.getName());

    //private static Map<String, Type> symTab = new TreeMap<String, Type>();

    public static void main( String[] args ) {
      logger.setLevel(Level.ALL);
      logger.log(Level.INFO, "Welcome to Caesar programming laguage!");
      InputStream is = System.in;
      if(args.length > 0) {
          try {
              is = new FileInputStream(args[0]);
          } catch (FileNotFoundException e) {
              logger.severe("Source file " + args[0] + " not found.");
          }
      }
      Caesar parser = new Caesar(is);
      try {
        ProgramTree t = parser.Start();
        //t.dump("");
        TreeVisitor v = new DumpCaesarVisitor();

        TreeVisitor interpreter = new CaesarInterpreter();
        t.accept(v);
        t.accept(interpreter);
      } catch (Exception e) {
        System.out.println(e.getMessage());
        e.printStackTrace();
      }
    }

  static final public ProgramTree Start() throws ParseException {
  IdentifierTree i;
  CommandListTree c;
  String n;
    jj_consume_token(PROGRAM);
    i = Identifier();
    jj_consume_token(COLON);
    c = CommandList();
    jj_consume_token(ENDPROGRAM);
    jj_consume_token(0);
    //i = new IdentifierTree(n);
    {if (true) return new ProgramTree(i, c);}
    throw new Error("Missing return statement in function");
  }

  static final public CommandListTree CommandList() throws ParseException {
  List<CommandTree> list = new ArrayList<CommandTree>();
  CommandListTree r;
  CommandTree c;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case IF:
      case WHILE:
      case PRINTLN:
      case CLASS:
      case IDENT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      c = Command();
    list.add(c);
    }
  {if (true) return new CommandListTree(list);}
    throw new Error("Missing return statement in function");
  }

/*CommandListRest(List<CommandTree> list) : {
  CommandTree c;
} 
{
  c = Command;
  {list.add(c);}
  (CommandListRest(list))?
  {return new CommandListTree(list);}
}*/
  static final public CommandTree Command() throws ParseException {
  CommandTree c;
  Token firstIdent;
  Token secondIdent = null;
  ExpressionTree e;
  List<ExpressionTree> params = new LinkedList<ExpressionTree>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      c = CreateVariableCmd();
                           {if (true) return c;}
      break;
    case IF:
      c = IfCmd();
                {if (true) return c;}
      break;
    case WHILE:
      c = WhileCmd();
                   {if (true) return c;}
      break;
    case PRINTLN:
      c = PrintlnCmd();
                      {if (true) return c;}
      break;
    case CLASS:
      c = ClassDefinition();
                           {if (true) return c;}
      break;
    case IDENT:
      firstIdent = jj_consume_token(IDENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        secondIdent = jj_consume_token(IDENT);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        e = Expression();
        IdentifierTree id = secondIdent == null ? new FieldIdentifierTree(firstIdent.image) : new ClassIdentifierTree(firstIdent.image, secondIdent.image);
        {if (true) return new AssignVariableTree(id, e);}
        break;
      case LBRC:
        jj_consume_token(LBRC);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
        case LBRC:
        case QUOTEDSTRING:
        case REAL_CONST:
        case INT_CONST:
          label_2:
          while (true) {
            e = Expression();
                          params.add(e);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              jj_consume_token(COMMA);
              break;
            case RBRC:
              jj_consume_token(RBRC);
              break;
            default:
              jj_la1[2] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENT:
            case LBRC:
            case QUOTEDSTRING:
            case REAL_CONST:
            case INT_CONST:
              ;
              break;
            default:
              jj_la1[3] = jj_gen;
              break label_2;
            }
          }
          break;
        case RBRC:
          jj_consume_token(RBRC);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
       if(secondIdent == null) {if (true) return new MethodCallTree(new FieldIdentifierTree(firstIdent.image), params);}
       else {if (true) return new MethodCallTree(new ClassIdentifierTree(firstIdent.image, secondIdent.image), params);}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public CreateVariableTree CreateVariableCmd() throws ParseException {
  String n;
  String c;
  ExpressionTree e;
  IdentifierTree i = null;
  Token t;
    jj_consume_token(VAR);
    i = Identifier();
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
    case LBRC:
    case QUOTEDSTRING:
    case REAL_CONST:
    case INT_CONST:
      e = Expression();
    i.setType(e.getType());
    {if (true) return new CreateVariableTree(i, e);}
      break;
    case NEW:
      jj_consume_token(NEW);
      t = jj_consume_token(IDENT);
      jj_consume_token(LBRC);
      jj_consume_token(RBRC);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    i.setType(t.image);
    {if (true) return new CreateVariableTree(i, null);}
    throw new Error("Missing return statement in function");
  }

  static final public CommandTree AssignVariableCmd() throws ParseException {
  String n;
  ExpressionTree e;
  IdentifierTree i;
    i = Identifier();
    jj_consume_token(ASSIGN);
    e = Expression();
    //i = new IdentifierTree(n);
    {if (true) return new AssignVariableTree(i, e);}
    throw new Error("Missing return statement in function");
  }

  static final public CommandTree IfCmd() throws ParseException {
  BinaryTree bt;
  CommandListTree c1;
  CommandListTree c2;
    jj_consume_token(IF);
    bt = Condition();
    jj_consume_token(COLON);
    c1 = CommandList();
    c2 = ElsePart();
   {if (true) return new IfTree(bt, c1, c2);}
    throw new Error("Missing return statement in function");
  }

  static final public CommandListTree ElsePart() throws ParseException {
  CommandListTree cmd = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      cmd = CommandList();
      jj_consume_token(ENDIF);
      break;
    case ENDIF:
      jj_consume_token(ENDIF);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return cmd;}
    throw new Error("Missing return statement in function");
  }

  static final public BinaryTree Condition() throws ParseException {
  BinaryTree bt;
  ExpressionTree e1;
  ExpressionTree e2;
  Operator op;
    e1 = Expression();
    op = RelationalOperator();
    e2 = Expression();
   {if (true) return new BinaryTree(op, e1, e2);}
    throw new Error("Missing return statement in function");
  }

  static final public Operator RelationalOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
          {if (true) return Operator.EQ;}
      break;
    case NE:
      jj_consume_token(NE);
          {if (true) return Operator.NE;}
      break;
    case LT:
      jj_consume_token(LT);
          {if (true) return Operator.LT;}
      break;
    case GT:
      jj_consume_token(GT);
          {if (true) return Operator.GT;}
      break;
    case LE:
      jj_consume_token(LE);
          {if (true) return Operator.LE;}
      break;
    case GE:
      jj_consume_token(GE);
          {if (true) return Operator.GE;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public CommandTree WhileCmd() throws ParseException {
    jj_consume_token(WHILE);
    Condition();
    jj_consume_token(COLON);
    CommandList();
    jj_consume_token(ENDWHILE);
   {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public PrintlnTree PrintlnCmd() throws ParseException {
  ExpressionTree e;
    jj_consume_token(PRINTLN);
    jj_consume_token(LBRC);
    e = Expression();
    jj_consume_token(RBRC);
   {if (true) return new PrintlnTree(e);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDefinitionTree ClassDefinition() throws ParseException {
  IdentifierTree className;
  List<CreateVariableTree> vars = new LinkedList<CreateVariableTree>();
  List<MethodDefinitionTree> methods = new LinkedList<MethodDefinitionTree>();
  CreateVariableTree var;
  MethodDefinitionTree mth;
    jj_consume_token(CLASS);
    className = Identifier();
    jj_consume_token(COLON);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case DEF:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        var = CreateVariableCmd();
     vars.add(var);
        break;
      case DEF:
        mth = MethodDefinition(className);
     methods.add(mth);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(ENDCLASS);
    {if (true) return new ClassDefinitionTree(className, vars, methods);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDefinitionTree MethodDefinition(IdentifierTree cls) throws ParseException {
    IdentifierTree returnType;
    IdentifierTree methodName;
    CommandListTree cmnds;
    Token nameToken;
    MethodParam p;
    List<MethodParam> params = new LinkedList<MethodParam>();
    jj_consume_token(DEF);
    returnType = Identifier();
    //methodName = Identifier()
      nameToken = jj_consume_token(IDENT);
   methodName = new FieldIdentifierTree(nameToken.image);
    jj_consume_token(LBRC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      label_4:
      while (true) {
        p = MethodParam();
                         params.add(p);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        case RBRC:
          jj_consume_token(RBRC);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
      }
      break;
    case RBRC:
      jj_consume_token(RBRC);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COLON);
    cmnds = CommandList();
    jj_consume_token(ENDDEF);
   {if (true) return new MethodDefinitionTree(cls, returnType, methodName, params, cmnds);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodParam MethodParam() throws ParseException {
  Token clsToken;
  Token nameToken;
    clsToken = jj_consume_token(IDENT);
    nameToken = jj_consume_token(IDENT);
   {if (true) return new MethodParam(nameToken.image, clsToken.image);}
    throw new Error("Missing return statement in function");
  }

/*MethodCallTree MethodCall() : {
  Token objName;
  IdentifierTree i;
  Token methodName;
  IdentifierTree m;
}
{
  objName = <IDENT> <DOT> methodName = <IDENT> <LBRC> <RBRC>
  {
    i = new FieldIdentifierTree(objName.image);
    m = new MethodIdentifierTree(methodName.image);
    return new MethodCallTree(i, m);
  }
}*/
  static final public ExpressionTree Expression() throws ParseException {
  ExpressionTree t;
  ExpressionTree r;
    t = Term();
    r = ExpressionX(t);
   {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionTree ExpressionX(ExpressionTree e1) throws ParseException {
  Operator op;
  ExpressionTree e2;
  BinaryTree t;
  ExpressionTree r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
     op = Operator.PLUS;
        e2 = Term();
     t = new BinaryTree(op, e1, e2);
        r = ExpressionX(t);
     {if (true) return r;}
        break;
      case MINUS:
        jj_consume_token(MINUS);
     op = Operator.MINUS;
        e2 = Term();
     t = new BinaryTree(op, e1, e2);
        r = ExpressionX(t);
     {if (true) return r;}
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
   {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionTree Term() throws ParseException {
  ExpressionTree t;
  ExpressionTree r;
    t = Factor();
    r = TermX(t);
   {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionTree TermX(ExpressionTree e1) throws ParseException {
  Operator op;
  ExpressionTree e2;
  BinaryTree bt;
  ExpressionTree r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
    case DIVIDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
   op = Operator.MULTIPLY;
        e2 = Factor();
   bt = new BinaryTree(op, e1, e2);
        r = TermX(bt);
   {if (true) return r;}
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
    op = Operator.DIVIDE;
        e2 = Factor();
    bt = new BinaryTree(op, e1, e2);
        r = TermX(bt);
    {if (true) return r;}
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
   {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionTree Factor() throws ParseException {
  ExpressionTree e;
  IdentifierTree i;
  String n;
  String m;
  LiteralTree l;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRC:
      jj_consume_token(LBRC);
      e = Expression();
     {if (true) return e;}
      jj_consume_token(RBRC);
      break;
    case IDENT:
      i = Identifier();
     {if (true) return i;}
      break;
    case INT_CONST:
      l = IntConst();
     {if (true) return l;}
      break;
    case REAL_CONST:
      l = RealConst();
     {if (true) return l;}
      break;
    case QUOTEDSTRING:
      l = StringConst();
     {if (true) return l;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionTree FactorRest(String n) throws ParseException {
  ExpressionTree e = null;
  String m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABRC:
      jj_consume_token(LABRC);
      e = Expression();
      jj_consume_token(RABRC);
      {if (true) return new FieldIdentifierTree(n, e);}
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
     {if (true) return new FieldIdentifierTree(n);}
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierTree Identifier() throws ParseException {
  Token t;
  Token tt = null;
  IdentifierTree it;
  MethodIdentifierTree mit;
    t = jj_consume_token(IDENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRC:
    case DOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        it = ClassIdentifier(t);
      {if (true) return it;}
        break;
      case LBRC:
        jj_consume_token(LBRC);
        jj_consume_token(RBRC);
      {if (true) return new MethodIdentifierTree(t.image);}
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    it = new FieldIdentifierTree(t.image);
    {if (true) return it;}
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierTree ClassIdentifier(Token t) throws ParseException {
  Token tt;
  IdentifierTree it;
    tt = jj_consume_token(IDENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRC:
      jj_consume_token(LBRC);
      jj_consume_token(RBRC);
      it = new ClassMethodIdentifierTree(t.image, tt.image);
      {if (true) return it;}
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    it = new ClassIdentifierTree(t.image, tt.image);
    {if (true) return it;}
    throw new Error("Missing return statement in function");
  }

  static final public LiteralTree StringConst() throws ParseException {
  Token t;
    t = jj_consume_token(QUOTEDSTRING);
    String str = t.image.substring(1, t.image.length()-1);
    {if (true) return new LiteralTree(str, "String");}
    throw new Error("Missing return statement in function");
  }

  static final public LiteralTree RealConst() throws ParseException {
  Token t;
    t = jj_consume_token(REAL_CONST);
   {if (true) return new LiteralTree(Double.parseDouble(t.image), "Real");}
    throw new Error("Missing return statement in function");
  }

  static final public LiteralTree IntConst() throws ParseException {
  Token t;
    t = jj_consume_token(INT_CONST);
   {if (true) return new LiteralTree(Integer.parseInt(t.image), "Integer");}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CaesarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40c128,0x0,0x20200000,0x10400000,0x30400000,0x10800000,0x40c128,0x10480000,0xc0,0x0,0x20008,0x20008,0x20200000,0x400000,0x20400000,0x3000000,0x3000000,0xc000000,0xc000000,0x10400000,0x40000000,0x10000000,0x10000000,0x10000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x40,0x0,0x380,0x380,0x0,0x0,0x380,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x380,0x0,0x40,0x40,0x0,};
   }

  /** Constructor with InputStream. */
  public Caesar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Caesar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CaesarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Caesar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CaesarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Caesar(CaesarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CaesarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  }
